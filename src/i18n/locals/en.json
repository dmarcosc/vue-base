{   
    "combobox": {
        "loading": "Cargando...",
        "notOptions": "No hay opciones"
    },
    "datepicker": {
        "cancel": "Cancelar"
    },
    "main":{
        "retrievingData": "Cargando...",
        "getCliente": "Obteniendo datos...",
        "listaValores": "Cargando catálogo de valores",
        "checkAddress": "Combrobando dirección...",
        "crearSolicitud": "Creando solicitud...",
        "guardarPaso": "Guardando paso...",
        "crearINE": "Generando INE...",
        "enviarINE": "Enviando INE...",
        "enviarPoliticaPrivacidad": "Enviando Política de Privacidad...",
        "simulator": "Cargando datos del simulador...",
        "privacyPolicy":"Privacy Policies",
        "colors": [
            "Red",
            "Blue",
            "White",
            "Orange",
            "Yellow",
            "Green",
            "Pink",
            "Black"
        ]
    },
    "header": {
        "home": "Home",
        "title": "Vue Archetype",
        "menu":"Main menu",
        "basic":"Basic Vue",
        "components":"Vue components",
        "advanced":"Advanced Vue",
        "playground":"Playground",
        "forms":"Forms",
        "client":"Client",
        "default":"Vue tutorial",
        "error":"Error",
        "tests":"Tests",
        "login": "Login",
        "logout": "Log out"
    },
    "error": {
        "title404": "Hay un problema en el sistema",
        "connectionError": "¡Oops! An error has occured",
        "koConsultText": "Catastrophic failure",

        "errors_404": {
            "STP_KO24": "Error guardando paso 24: Firmado OK",
            "STP_FA24": "Fallo de comunicación paso 24: Firmado OK",
            "UND_CONS": "Página en construcción",
            "CAT_MONTHS": "Error cargando catálogo \"Meses\" de datos iniciales",
            "CAT_FIN_PRES": "Error cargando catálogo \"Finalidad Préstamo\" de datos iniciales",
            "CAT_PAIS": "Error cargando catálogo \"Paises\" de datos iniciales",
            "CAT_PAI3": "Error cargando catálogo \"Paises3\" datos iniciales",
            "CAT_NACI": "Error cargando catálogo \"Nacionalidades\" de datos iniciales",
            "CAT_PROV": "Error cargando catálogo \"Provincias\" de datos iniciales",
            "CAT_CNAE": "Error cargando catálogo \"CNAE\" de datos iniciales",
            "CAT_TTRA": "Error cargando catálogo \"Tipo Trabajo\" datos iniciales",
            "CAT_PROF": "Error cargando catálogo \"Profesiones\" de datos iniciales",
            "CAT_TRES": "Error cargando catálogo \"Tipo Residencia\" de datos iniciales",
            "CAT_CARG": "Error cargando catálogo \"Cargos\" de datos iniciales",
            "CAT_TVIV": "Error cargando catálogo \"Tipo Vivienda\" de datos iniciales",
            "CAT_ESCI": "Error cargando catálogo \"Estado Civil\" de datos iniciales",
            "CAT_TVIA": "Error cargando catálogo \"Tipo Vía\" de datos iniciales",
            "NUE_SOLI": "Fallo de comunicación obteniendo datos del cliente",
            "DET_SOLI": "Error obteniendo detalles de solicitudes",
            "EST_SOLI": "Error obteniendo estadísticas de solicitudes",
            "ACT_DATA_KO": "Error actualizando datos de contacto: Pendiente OTP",
            "ACT_DATA_FA": "Fallo de comunicación actualizando datos de contacto: Pendiente OTP",
            "ELI_BOR_KO": "Error eliminando borrador de la solicitud en curso",
            "DES_REQ_KO": "Error eliminando la solicitud en curso",
            "SIN_BOR_KO": "Error obteniendo datos del borrador de la solicitud en curso",
            "SIN_SOL_KO": "Error obteniendo datos de la solicitud en curso",
            "SGA_DATA_KO": "Error con los datos para enviar a Sgaim",
            "ENV_INE_KO": "Error enviando la INE",
            "ENV_DOC_KO": "Error enviando la documentacion aportada",
            "INE_KO": "Error en el envío de la INE",
            "INE_FAIL": "Error de conexión en el envío de la INE",
            "STP_KO01": "Error guardando paso",      
            "PRO_LINE": "Error obteniendo propuesta de líneas",
            "PEN_SOLI": "Error obteniendo datos de solicitudes pendientes",
            "POLI_FAIL": "Error enviando la política de privacidad",
            "GET_CLIENTE_FAIL": "Error obteniendo productos",
            "ENVIO_POLITICA_PRIVACIDAD_FAIL": "Error enviando la política de privacidad"
        }
    },
    "buttons": {
        "accept": "Accept",
        "access": "Access",
        "send": "Send",
        "back": "Back",
        "continue": "Continue",
        "calculate": "Calculate",
        "close": "Close",
        "save": "Save",
        "yes":"YES",
        "no":"NO",
        "tryAgain":"Try again",
        "es": "ES",
        "en":"EN",
        "playground":"Playground",
        "browse":"Browse",
        "dialog":"Dialog",
        "alert":"Alert"
    },
        "form": {
            "title-a": "Personal",
            "title-b": "Loan Engagement",
            "sub-title": "Fill the following data for the loan request:",
            "name":"NAME",
            "id":"IDENTIFICATION DOCUMENT",
            "phone":"PHONE NUMBER",
            "email":"EMAIL",
            "country":"COUNTRY",
            "countries": [
                "Spain",
                "France",
                "Italy",
                "Germany",
                "Portugal",
                "Belgium",
                "Croatia"
            ],
            "date": "BIRTH DATE",
            "accept-policy-a":"Accept the ",
            "accept-policy-b":"Privacy Policy of SF Carrefour",
            "accept-terms": "Accept the Terms and Conditions of SF Carrefour",
            "client-title": "Client data",
            "nSeguridadSocial": "SOCIAL SECURITY NUMBER",
            "direccion": "ADDRESS",
            "edad": "AGE",
            "nacionalidad": "NATIONALITY"
        },
        "home": {
            "structure":"Structure",
            "lifeCycles": "Life cycles",
            "directives": "Directives",
            "events":"Events and father/child communication",
            "components": "Components",
            "dialogs": "Dialogs",
            "routing":"Routing",
            "store":"Store",
            "api":"Api and services",
            "directivesText1":" Directives are basically like HTML attributes which are added inside templates. They all start with v-, to indicate that’s a Vue special attribute, an example of these are, v-for, v-bind o v-on, among others. They are typically useful if you need low-level access to an HTML element to control a bit of behavior. An important concept when learning directives is Two-way data binding, this, applied to Vue means that the model can change the view and viceversa. The most common directives are, {{ msg }} this text interpolation using the “Mustache” syntax is the most basic form of data binding, this tag will be replaced with the value of the msg property on the corresponding data object, it will also be updated whenever the data object’s msg property changes. The v-if and v-show directives remove/insert the html element they are placed in based on the truthiness of the value of the expression you pass as parameter, v-bind just like interpolation dynamically binds one or more attributes, or a component prop to an expression (shorthand ':'), v-on when used on a normal element, it listens to native DOM events only. When used on a custom element component, it listens to custom events emitted on that child component as we''ll see later (shorthand '@'). An important directive for components is v-model, (works like v-bind+v-on) it creates a two-way binding on a form input element or a component. ",
            "lifeCyclesText1": "Each Vue instance goes through a series of initialization steps when it’s created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages. For example, the created hook can be used to run code after an instance is created, before the template is rendered, on the other hand, the mounted cycle is used right after the template is compiled.",
            "structureText1":"The basic structure of Vue consists of three different parts, leaving the decision of separating them into different files, or having all three in whats known as Single File Component up to you. The first part will always be a template that contains the component's html, texts and directives we'll explain later, second part consists of a javascript (or typescript) code script, where all the components logic, imports, data, DOM and event handling will be performed, and the last section will be another script with the styling code in CSS or related languages like Sass, note that it is convenient to add the scoped tag to this script so it only applies to elements of the current component",
            "routingText1":"The folder 'router' contains all the routes, there you'll find an array of routes and each one should have at least a 'path', a name to use as a refference, and it should also map to a component we had previously built in our views. Besides these let's say 'mandatory' params, we can also use others like 'children' to create another array for nested routes, 'props' a boolean that allows us to pass parameters via router, or 'meta'/'beforeEnter' both permitting us to do validations before rendering that view. The last thing we need to do in order to make this routing work, is to add the html tag <router-view /> to a template (which is normally the App.js template).",
            "routingText2":"We can access the router from any view using '$', in order to navigate through routes we will use this method",
            "routingText3":"This $router has more useful properties such as 'currentRoute' o 'back', more info",
            "routingExample1":" this.$router.push('path')",
            "eventsText1":"We can find the events in any of the life cycles of vue, but for the most part we'll find them in the 'methods' section, we can bind these events to the html template using v-on ( or its shortcut @),this directive will be attached to a DOM event like 'click,change,blur...' and will bind those to our method in the script, just like our counter does, or you can also put an expression if its a simple task ",
            "eventsText2":"We can pass events father to child via props just like we pass data, these props are used like html attributes but they also need to be declared in a specific child's script section, in order to communicate the other way around, child to father we have to emit the event we want to trigger on the parent this way",
            "eventsExample1":"@click='counter++'",
            "eventsExample2":"$emit('eventName', params)",
            "componentsText1":"In the 'components' folder we have the functional components we use at Carrefour with its own styles applied, these components are based on a library of our own (based on MaterialUI), which style sheet and instructions we can find",
            "componentsText2":" (we sometimes make use of ",
            "componentsText3":") In order to use any component, whether its custom or from the mencioned libraries, one would only need to import it in the script, declare the refference in components, and of course make use of it on the template. The most important directive we must have in mind is 'v-model', this directive works asit would v-bind+v-on do, and creates a two-way binding between the component and the view that contains the component, another important directive is v-bind='$attrs', using this on the component will provide parent-scope attribute bindigs except for class and style, without having to mention them.",
            "componentsText4":"Each component has its own directives, so using the style sheet mentioned before is key. Another important piece of components are Slots, these slots works allows you to compose your components, similar to props but using html instead.",
            "dialogsText1":"We have two types of dialogs in this proyect, an alert dialog that consist of an icon, text and one or two buttons, and a more customizable 'basic' dialog, which contains a title, one or two buttons and a component that will be rendered in the 'content' slot of the dialog, which allows us to show any custom html structure within it. These types of dialogs and their parameters are specific to this project and some of the Vue projects in Carrefour, so they may vary in other Vue projects you can find, but the render handling is very similar in all projects, this is done using vuex, which We will explain later, however the concept is simple (mask is handled the same way), the dialog is declared in the root (App.js), then you build some open close basic handlers (mutations & actions), a state and a getter, after that you set the v-model of the dialog in the App.js using a computed property pointing to the vuex getter you just created, (here you might want to add more directives like the close event) and that's it, to display the dialog you would only have to trigger the open action from any view through vuex passing the component you want to add as content.",
            "storeText1":"Vuex store is a global and centralized store for all the components in an app, divided in different parts. The state object contains the data that defines the app in a certain moment; it is the only place where these values can be checked. The access and preprocessing of the data cannot be made directly, getters are made for that purpose. Another important part of the store are mutations, which are events that modify the state. Lastly, we fire the mutations using actions, the access point for updating the state. As well as the state, mutations cannot be accessed directly, a dispatch must be used to fire the action, which will make a commit to the corresponding mutation.",
            "apiText1":"In order to consume services from an API is necessary to create, for each service, the following: its implementation and mock, a factory, where it is indicated which one to use and a repository, for declaring the requests of the service. This requests are implemented in the implementation previously mentioned, where the requests to the API will be made, obtaining the corresponding real response, while the mock will return a previously created response. Another part are DTOs: created one for the request and another for the response of a service, used in its corresponding implementation. Lastly, in order to invoke those services dispatch is used, specifying the service and its corresponding parameters.",
            "loginText": "In the login form there are two texfields from the carrefour library, one for the email and the other one for the password. Both of them have the required field validation and the latter has the \"password\" property for hiding the text. When the continue button is clicked the validation of the email and password is made in the database. If one of them is not correct an alert showing the error will appear.",
            "formsText": "For the forms there are different components, available from the carrefour libary: textfields, numeric fields, datefields, comoboxes and checkboxes. Each field must have specified its corresponding validations. There are already some validations defined in the utils file (required field, valid document, valid phone number, etc.), which can be imported directly. Each validation has assigned an error message, which is specified in the component corresponding to that field. Lastly, there are some properties that can be assigned to each field: label, required, enable, clearable, etc.",
            "info":" more info ",
            "here":" Here",
            "counter":"Counter",
            "forms":"Forms"       
        },
        "errors": {
        "required": "This field is required",
        "request": "Error in the request"
        },        
        "login": {
            "subtitle": "Fill the following data to log in",
            "email": "Email",
            "password": "Password",
            "error-email": "Email does not correspond to any client",
            "error-password": "Incorrect password",
            "error":"Identification error"
        },
        "tests": {
            "title1": "Practice 1",
            "title2": "Practice 2",
            "enunciado1": "Create a form with a field for the DNI/NIE. If the field is filled with an NIE a combobox for indicating the nacionality will appear right below. This combobox must be visible only in that case. Add three comboboxes whose options depend on the previously selected. The first one will show all the options; once one of them is selected the second one will show the options associated to said option; and the same happens with the last combobox. Example: the first combobox shows the authonomical communities of Spain; once one is selected the second combobox will show the provinces from that community. When a province is selected the third combobox will show the municipalities in that province. Add also a group of radio buttons (radio group). There cannot be more than one button selected at the same time and one of them has to be selected (required field). Lastly, add a switch that will enable a textfield once it is selected.",
            "enunciado2": "Create a component that uses the checkbox from the carrefour library. The component must be equal to the following checkbox:",
            "before": "Before",
            "after": "After",
            "example": "Example"
        }
    }