{   
    "combobox": {
        "loading": "Cargando...",
        "notOptions": "No hay opciones"
    },
    "datepicker": {
        "cancel": "Cancelar"
    },
    "main":{
        "retrievingData": "Cargando...",
        "getCliente": "Obteniendo datos...",
        "listaValores": "Cargando catálogo de valores",
        "checkAddress": "Combrobando dirección...",
        "crearSolicitud": "Creando solicitud...",
        "guardarPaso": "Guardando paso...",
        "crearINE": "Generando INE...",
        "enviarINE": "Enviando INE...",
        "enviarPoliticaPrivacidad": "Enviando Política de Privacidad...",
        "simulator": "Cargando datos del simulador...",
        "privacyPolicy":"Política de privacidad",
        "colors": [
            "Rojo",
            "Azul",
            "Blanco",
            "Naranja",
            "Amarillo",
            "Verde",
            "Rosa",
            "Negro"
        ]
    },
    "header": {
        "home": "Inicio",
        "title": "Arquetipo Vue",
        "menu":"Menú principal",
        "basic":"Conocimientos básicos",
        "components":"Componentes en Vue",
        "advanced":"Vue avanzado",
        "playground":"Playground",
        "forms":"Formulario",
        "client":"Zona cliente",
        "default":"Formación Vue",
        "error":"Error",
        "tests":"Prácticas",
        "login": "Login",
        "logout": "Cerrar sesión"
    },
    "error": {
        "title404": "Hay un problema en el sistema",
        "connectionError": "¡Oops! No hay conexión",
        "koConsultText": "No hemos podido realizar la consulta",

        "errors_404": {
            "STP_KO24": "Error guardando paso 24: Firmado OK",
            "STP_FA24": "Fallo de comunicación paso 24: Firmado OK",
            "UND_CONS": "Página en construcción",
            "CAT_MONTHS": "Error cargando catálogo \"Meses\" de datos iniciales",
            "CAT_FIN_PRES": "Error cargando catálogo \"Finalidad Préstamo\" de datos iniciales",
            "CAT_PAIS": "Error cargando catálogo \"Paises\" de datos iniciales",
            "CAT_PAI3": "Error cargando catálogo \"Paises3\" datos iniciales",
            "CAT_NACI": "Error cargando catálogo \"Nacionalidades\" de datos iniciales",
            "CAT_PROV": "Error cargando catálogo \"Provincias\" de datos iniciales",
            "CAT_CNAE": "Error cargando catálogo \"CNAE\" de datos iniciales",
            "CAT_TTRA": "Error cargando catálogo \"Tipo Trabajo\" datos iniciales",
            "CAT_PROF": "Error cargando catálogo \"Profesiones\" de datos iniciales",
            "CAT_TRES": "Error cargando catálogo \"Tipo Residencia\" de datos iniciales",
            "CAT_CARG": "Error cargando catálogo \"Cargos\" de datos iniciales",
            "CAT_TVIV": "Error cargando catálogo \"Tipo Vivienda\" de datos iniciales",
            "CAT_ESCI": "Error cargando catálogo \"Estado Civil\" de datos iniciales",
            "CAT_TVIA": "Error cargando catálogo \"Tipo Vía\" de datos iniciales",
            "NUE_SOLI": "Fallo de comunicación obteniendo datos del cliente",
            "DET_SOLI": "Error obteniendo detalles de solicitudes",
            "EST_SOLI": "Error obteniendo estadísticas de solicitudes",
            "ACT_DATA_KO": "Error actualizando datos de contacto: Pendiente OTP",
            "ACT_DATA_FA": "Fallo de comunicación actualizando datos de contacto: Pendiente OTP",
            "ELI_BOR_KO": "Error eliminando borrador de la solicitud en curso",
            "DES_REQ_KO": "Error eliminando la solicitud en curso",
            "SIN_BOR_KO": "Error obteniendo datos del borrador de la solicitud en curso",
            "SIN_SOL_KO": "Error obteniendo datos de la solicitud en curso",
            "SGA_DATA_KO": "Error con los datos para enviar a Sgaim",
            "ENV_INE_KO": "Error enviando la INE",
            "ENV_DOC_KO": "Error enviando la documentacion aportada",
            "INE_KO": "Error en el envío de la INE",
            "INE_FAIL": "Error de conexión en el envío de la INE",
            "STP_KO01": "Error guardando paso",      
            "PRO_LINE": "Error obteniendo propuesta de líneas",
            "PEN_SOLI": "Error obteniendo datos de solicitudes pendientes",
            "POLI_FAIL": "Error enviando la política de privacidad",
            "GET_CLIENTE_FAIL": "Error obteniendo productos",
            "ENVIO_POLITICA_PRIVACIDAD_FAIL": "Error enviando la política de privacidad"
        }
    },
    "buttons": {
        "accept": "Aceptar",
        "access": "Acceder",
        "send": "Enviar",
        "back": "Volver",
        "continue": "Continuar",
        "calculate": "Calcular",
        "close": "Cerrar",
        "save": "Guardar",
        "yes":"SI",
        "no":"NO",
        "tryAgain":"Volver a intentar",
        "es": "ES",
        "en":"EN",
        "browse":"Navegar",
        "playground":"Playground",
        "dialog":"Diálogo",
        "alert":"Alerta"
    },
        "form": {
            "title-a": "Contratación",
            "title-b": "Préstamo Personal",
            "sub-title": "Indícanos estos datos para la solicitud del préstamo:",
            "name":"NOMBRE",
            "id":"DOCUMENTO DE IDENTIFICACIÓN",
            "phone":"TELÉFONO MÓVIL",
            "email":"CORREO ELECTRÓNICO",
            "country":"PAÍS",
            "countries": [
                "España",
                "Francia",
                "Italia",
                "Alemania",
                "Portugal",
                "Bélgica",
                "Croacia"
            ],
            "date": "FECHA DE NACIMIENTO",
            "accept-policy-a":"Acepta la ",
            "accept-policy-b":"Política de Privacidad de SF Carrefour",
            "accept-terms": "Acepta los Términos y Condiciones de SF Carrefour</span>",
            "client-title": "Datos del cliente",
            "nSeguridadSocial": "NÚMERO DE LA SEGURIDAD SOCIAL",
            "direccion": "DIRECCIÓN",
            "edad": "EDAD",
            "nacionalidad": "NACIONALIDAD"
        },
        "home": {
            "structure":"Estructura",
            "lifeCycles": "Ciclos de vida",
            "directives": "Directivas",
            "events":"Eventos y comunicación padre/hijo",
            "components": "Componentes",
            "dialogs": "Diálogos",
            "routing":"Routing",
            "store":"Store",
            "api":"Api y servicios",
            "directivesText1":"Las directivas de Vue son atributos especiales que se colocan en las etiquetas HTML y están prefijados por v-, como por ejemplo, v-for, v-bind o v-on, entre muchas otras. Estas directivas permiten realizar acciones dinámicas potentes (bucles, condicionales, etc...) que no se pueden realizar en HTML por si solo. Un concepto importante que aparece con estas directivas es el Two-way data binding, lo cual viene a ser un enlace en dos direcciones, es decir, que el modelo puede cambiar la vista, pero que la vista también puede cambiar al modelo, lo que implica que siempre todo estará actualizado automáticamente. Las directivas más comunes son, {{ var }} estas dobles llaves nos permiten referenciar variables desde el template, las directivas v-if y v-show permiten mostrar u ocultar html a partir del booleano que se les pase, v-bind permite enlazar una variable con un atributo específico de una etiqueta html como podría ser el src de una imagen (se puede abreviar con ':'), v-on es una directiva utilizada para gestionar los eventos del DOM desde los templates de Vue, su abreviatura es '@', una directiva que veremos más a fondo en componentes es v-model, que fusiona en uno las dos directivas anteriores. ",
            "lifeCyclesText1":"Cada instancia de Vue pasa a través de una serie de pasos de inicialización cuando es creada - por ejemplo, se necesita configurar la observación de datos, compilar la plantilla, montar la instancia en el DOM y actualizar el DOM cuando cambian los datos. En el camino, también se ejecutan funciones llamadas hooks del ciclo de vida, lo que brinda a los usuarios la oportunidad de agregar su propio código en etapas específicas. Por ejemplo, el hook created puede ser utilizado para ejecutar código después que una instancia es creada pero antes de que se renderice el template, sin embargo el ciclo mounted tendrá lugar justo después de renderizar el template. Saber cuando utilizar cada uno de estos ciclos es una parte fundamental de Vue",
            "structureText1":"La estructura básica de Vue consta de tres partes diferenciadas, pudiendo tenerlas todas juntas en lo conocido como SingleFileComponents, o separadas en tres (o dos) archivos si nos es más cómodo. Estas tres partes serán, un template que contendrá el html del componente, textos y las directivas que enlazarán los datos y eventos, un script javascript (o typescript) donde realizar toda la lógica del componente, importaciones, manejo de datos, eventos, manipulaciones del DOM etc, y una tercera y última parte que será otro script, en este caso CSS (puede utilizar Sass, Less etc) que será donde tendremos nuestras clases aplicadas al template, a este script conviene añadirle la directiva scoped para que afecte únicamente al template correspondiente y no a toda la app.",
            "routingText1":"En la carpeta 'router' estarán declaradas las rutas, éstas estarán contenidas en un vector de objetos y tendrán al menos un 'path', que será la url de esa vista, un 'name' que utilizaremos como referencia, y un 'component' que apuntará al archivo .vue que queremos renderizar. Además de estos parámetros podremos añadir otros extra como 'children' que será otro vector de rutas anidadas, 'props' un booleano que permitirá pasar parámetros a través del router, o 'meta'/'beforeEnter' ambas con una funcionalidad similar nos permitirán realizar comprobaciones antes de navegar a dicha routa e incluso no permitir esta navegación. Por último para agregar nuestro vector de rutas a la vista basta con añadir un template ( generalmente el del App.vue) el tag < router-view />.",
            "routingText2":"Accederemos al router utilizando el símbolo '$' desde cualquier vista, para navegar hacia otra ruta utilizaremos el método push del router de la siguiente manera",
            "routingText3":"Este objeto $router tendrá más métodos interesantes como 'currentRoute' o 'back', más info",
            "routingExample1":" this.$router.push('path')",
            "eventsText1":"Los eventos como hemos visto los podremos introducir en cualquier ciclo de vida que nos interese, siendo el lugar más habitual la parte 'methods', y los conectaremos al html mediante la directiva v-on ( o el atajo @), esta directiva acompañará a un evento html tipo 'click,change,blur' y la bindeará a nuestro método como en el ejemplo del contador, o a una expresión directamente si se trata de algo simple.",
            "eventsText2":"Para pasar un evento de padre a hijo podemos hacerlo utilizando props, estas props se pasarán de igual manera que cualquier atributo al componente desde el padre, y se deberán declarar en una sección en el script del hijo. Para poder comunicarnos con el padre desde el hijo tendremos que emitir el evento al que queremos llamar de la forma ",
            "eventsExample1":"@click='counter++'",
            "eventsExample2":"$emit('eventName', params)",
            "componentsText1":"En la carpeta 'components' disponemos de componentes ya funcionales con los estilos de Carrefour, estos componentes están basados en una librería (a su vez basada en MaterialUI), cuya guía de estilos podemos consultar",
            "componentsText2":" (en ocasiones también hacemos uso de ",
            "componentsText3":") Para utilizar cualquier componente, ya sea custom o de una de las librerías citadas, basta con importarlo en el script, declararlo en components, y por supuesto utilizarlo en el template. La directiva más importante que deberemos tener en cuenta es 'v-model' que funciona como v-bind+v-on y nos permite un bindeo bidireccional entre el componente y la vista que lo contiene, también cabe mencionar v-bind='$attrs', la cual colocada en el hijo nos permitirá recibir todas las directivas y propiedades sin tener que reescribirlas en nuestro componente.",
            "componentsText4":"Cada componente tendrá unas directivas particulares que, ayudándonos de la guía de estilos mencionada, podremos utilizar fácilmente. Por último cabe mencionar aquí los Slots, los cuales, al igual que las props que nos permiten pasar objetos o variables, estos de forma similar nos permiten inyectar código html.",
            "dialogsText1":"En este proyecto tenemos dos tipos de diálogos predefinidos, un diálogo alerta que consta de icono, texto y uno o dos botones, y un diálogo 'básico' más customizable, al que le pasaremos un título, uno o dos botones y un componente que se renderizará en el slot 'content' del diálogo, lo que nos permite mostrar cualquier estructura dentro de este. Estos tipos de diálogos y sus parámetros son concretos de este proyecto y algunos más de carrefour, por lo que pueden variar en otros proyectos, lo que no varía en líneas generales es el manejo del renderizado de los diálogos, este se realiza utilizando vuex, que explicaremos más adelante, sin embargo el concepto es sencillo (la máscara funciona de igual manera), se declara el componente en la raíz (App.js), en la store se crean unos manejadores open close básicos, un state y un getter, mediante una propiedad computada en el App.js que apunte al getter de vuex se setea el v-model del componente, se añaden las directivas necesarias (por ejemplo el evento close) y ya está, bastará con llamar al open de vuex desde cualquier vista para mostrar el diálogo.",
            "storeText1":" La store de Vuex es una tienda global y centralizada para todos los componentes en una aplicación, y consta de varias partes diferenciadas. El State es un objeto plano, este contiene los valores que definen tu aplicación en un momento dado. Es la única fuente de verdad, es decir, es el único lugar donde consultar estos valores. El acceso/consulta o preprocesamiento de los datos no se debe hacer directamente al state, para esto tenemos los Getters. El otro pilar de la store son las mutaciones, que vendrían a ser como eventos enfocados a modificar el state, y por último las acciones son funciones que disparan una determinada mutación, es decir nuestro punto de acceso a las modificaciones. Al igual que con el State no se debe acceder a las mutaciones directamente, se utilizará un dispatch para llamar a una acción, y está lanzará un commit a la mutación correspondiente.",
            "apiText1":"A la hora de conusmir servicios de una API es necesario crear para cada servicio lo siguiente: su implementación y su mock, una factoría, donde se indica cuál de los dos se utiliza y un repositorio, donde se declaran las llamadas del servicio. Estas llamadas se implementan en la implementación mencionada antes: ahí se harán las llamadas a la API, obteniendo la respuesta real; mientras que para el mock se devuelve una respuesta creada previamente. Otra parte son los DTOs: se crea uno para cada request y respuesta de un servicio, y se utilizan en su correspondiente implementación. Por último, para invocar los servicios se utiliza dispatch, indicando el servicio que se quiere invocar y sus parámetros correspondientes. ",
            "formsText": "Para los formularios se utilizan diferentes componentes de la librería de carrefour: entradas de texto y numéricas, fechas, comboboxes y checkboxes. Para cada una utilizada hay que indicar las validaciones correspondientes. Hay varias que ya están hechas en el archivo de utils (campo requerido, DNI válido, teléfono móvil válido, etc.), por lo que solo es necesario importarlas. Para cada validación hay que indicar un mensaje de error; estos están especificados en el componente correspondiente a cada entrada. Por último, se pueden indicar diferentes propiedades para cada campo: etiqueta, si un es requerido, si está activado, si se puede limpiar, etc.",
            "loginText": "Para el formulario de iniciar sesión se utilizan dos campos de texto de la librería de carrefour, ambos con la validación de campo requerido y el campo contraseña con la propiedad \"password\" para no mostarla. Al pulsar el botón de continuar se hace la validación del correo y la contraseña en la base de datos. En el caso de que alguno no sea correcto se muestra un diálogo indicando el error.",
            "info":" más info ",
            "here":" Aquí",
            "counter":"Contador",
            "forms":"Formularios"       
        },
        "errors": {
            "required": "El campo es requerido",
            "request": "Error en la solicitud"
        },        
        "login": {
            "subtitle": "Rellena los siguientes datos para inciar sesión",
            "email": "Correo",
            "password": "Contraseña",
            "error-email": "El email no corresponde a ningún cliente",
            "error-password": "Contraseña incorrecta",
            "error":"Error de identificación"
        },
        "tests": {
            "title1": "Práctica 1",
            "title2": "Práctica 2",
            "enunciado1": "Crear un formulario en el que haya un campo para indicar el DNI/NIE. En el caso de que se escriba un NIE deberá aparecer debajo una combobox para indicar la nacionalidad. Debe ser visible solo en ese caso. Añadir tres comboboxes cuyas opciones dependan de lo seleccionado anteriormente. La primera mostrará todas las opciones; una vez seleccionada una, la segunda mostrará las opciones asociadas a dicha opción, repitiéndose lo mismo para la tercera comobox. Ejemplo: primera combobox muestra las comunidades autónomas de España; al seleccionar una la segunda combobox mostrará las provincias de esa comunidad, y al seleccionar una provincia la tercera mostrará los municipios de esa provincia. Añadir también un grupo de botones de radio (radio group). Solo uno de los botones puede ser marcado a la vez y debe ser obligatorio marcar alguno (campo requerido). Por último, añadir un switch, que habilitará un campo de texto una vez esté seleccionado.",
            "enunciado2": "Crear un componente que utilice la checkbox de la librería de carrefour. El componente debe ser igual a la siguiente checkbox:",
            "before": "Antes",
            "after": "Después",
            "example": "Ejemplo"
        }
    }

